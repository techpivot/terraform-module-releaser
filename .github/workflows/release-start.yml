name: Start Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: Specifies the new release version (X.Y.Z)
        required: true
        type: string
  # Note: If necessary, add a push/branch to test workflow appropriately.

concurrency:
  group: release
  cancel-in-progress: true # Cancel any in-progress runs for this group

env:
  VERSION: ${{ github.event.inputs.release_version }}
  BRANCH_NAME: release/v${{ github.event.inputs.release_version }}

jobs:
  preview-release:
    name: release
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required to read repo contents. Note: We leverage release-preview app for PR + commit generation
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get all history which is required for parsing commits

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci --no-fund

      - name: Update package.json version
        run: npm version ${{ env.VERSION }} --no-git-tag-version

      - name: Build the package
        run: npm run package

      - name: Generate Changelog
        uses: actions/github-script@v7
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          result-encoding: json
          script: |
            const { generateChangelog } = await import('${{ github.workspace }}/.github/scripts/changelog.js');

            try {
              const changelog = await generateChangelog("${{ env.VERSION }}");
              console.log('Generated changelog:', changelog);
              return changelog;
            } catch (error) {
              console.error('Error generating changelog:', error);
              core.setFailed(error.message);
            }

      # Pull requests created by the action using the default GITHUB_TOKEN cannot trigger other workflows.
      # If you have on: pull_request or on: push workflows acting as checks on pull requests, they will not run.
      #
      # See below for additional documentation on workarounds:
      #
      # https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#triggering-further-workflow-runs

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.RELEASE_PREVIEW_APP_ID }}
          private-key: ${{ secrets.RELEASE_PREVIEW_APP_PRIVATE_KEY }}

      - name: Get GitHub App User Details
        id: app-user
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          user_name="${{ steps.app-token.outputs.app-slug }}[bot]"
          user_id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)
          {
            echo "user-name=${user_name}"
            echo "user-id=${user_id}"
            echo "email=${user_id}+${user_name}@users.noreply.github.com"
          } >> "$GITHUB_OUTPUT"

      # Note: We can't change the head branch once a PR is opened. Thus we need to delete any branches
      # that exist from any existing open pull requests. (App Perm = Pull Request: Read + Write)
      - name: Close existing release pull requests
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            const prTitleRegex = /^chore\(release\): v\d+\.\d+\.\d+$/;

            console.log('Searching for existing open PRs ...');
            const { data: existingPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100,
              state: 'open',
              creator: 'github-actions[bot]'
            });

            for (const pr of existingPRs) {
              console.log('Analyzing PR', pr.number, pr.title, pr.user.login);

              // Check if the title matches the format and it's created by the correct user
              if (prTitleRegex.test(pr.title) && pr.user.login === '${{ steps.app-user.outputs.user-name }}') {
                console.log(`PR #${pr.number} has a valid title: ${pr.title}`);

                // Close the existing pull request
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  state: 'closed'
                });
                console.log(`Closed PR #${pr.number}`);

                // Now delete the branch
                const branchName = pr.head.ref;
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branchName}`
                });
                console.log(`Deleted branch '${branchName}' associated with PR #${pr.number}`);
              }
            }

      - name: Create Branch and Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.app-token.outputs.token }}
          base: main
          branch: ${{ env.BRANCH_NAME }}
          title: "chore(release): v${{ env.VERSION }}"
          body: ${{ fromJSON(steps.changelog.outputs.result) }}
          commit-message: "chore(release): v${{ env.VERSION }}"
          sign-commits: true # Note: When setting sign-commits: true the action will ignore the committer and author inputs.
          delete-branch: true
          labels: release
          signoff: false # For now, this specifically adds the github-actions[bot] sign-off. Add back when we can customize the trailer
